generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Datum {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    dateTime  DateTime

    tags            Tag[]
    postEngagements PostEngagement[]
}

model Tag {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String

    datums     Datum[]
    posts      Post[]
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
}

model Category {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String

    posts Post[]
    tag   Tag[]
}

model Post {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    content   String

    tag             Tag              @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId           String
    postEngagements PostEngagement[]
    category        Category?        @relation(fields: [categoryId], references: [id])
    categoryId      String?
    latestPost      LatestPost[]
}

model PostEngagement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    count     Int

    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String

    datum   Datum  @relation(fields: [datumId], references: [id], onDelete: Cascade)
    datumId String
}

model LatestPost {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String
}
