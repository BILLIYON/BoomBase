// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Datum {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    dateTime    DateTime
    isPublished Boolean  @default(false)

    tags            Tag[]
    postEngagements PostEngagement[]
}

model Tag {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String   @unique

    datums     Datum[]
    posts      Post[]
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
}

model Category {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String

    posts Post[]
    tags  Tag[]
}

model PostEngagement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    amount    Int

    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String

    datum   Datum  @relation(fields: [datumId], references: [id], onDelete: Cascade)
    datumId String
}

model LatestPost {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String

    @@index([postId])
}

model Post {
    id              String   @id @default(cuid())
    title           String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    text            String
    thumbnailURL    String
    URL             String
    postUsername    String
    postUserLogoURL String
    mediaIcon       String

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    tag             Tag              @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId           String
    postEngagements PostEngagement[]
    category        Category?        @relation(fields: [categoryId], references: [id])
    categoryId      String?
    latestPost      LatestPost[]

    @@index([title])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    role          String    @default("user")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
